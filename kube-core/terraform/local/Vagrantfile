require File.join(File.dirname(__FILE__), 'kraken_helpers.rb')

install_plugins

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  # plugin conflict
  if Vagrant.has_plugin?("vagrant-vbguest") then
    config.vbguest.auto_update = false
  end

  config.ssh.insert_key = false
  #config.ssh.private_key_path = File.expand_path(ENV['KRAKEN_VAGRANT_PRIVATE_KEY'])
  config.ssh.forward_agent = true
  config.ssh.username = 'core'

  config.vm.box = coreos_boxname
  config.vm.box_version = "= #{coreos_release}"
  config.vm.box_url = "#{coreos_url}/#{coreos_release}/coreos_production_vagrant.json"

  config.trigger.before :up, :vm => 'etcd'  do
    info "getting ansible roles"
    run "ansible-galaxy install sigma.coreos-bootstrap --ignore-errors"
    run "touch #{ENV['VAGRANT_CWD']}/rendered/ansible.inventory"
  end

  # array of systems with multinodes for ansible inventory
  apiserver_nginx_pool = ""
  apiserver_host_data = ""
  node_host_data = ""

  (1..(get_num_vms)).each do |i| # number of nodes + number of apiservers + master and etcd nodes

    user_data = build_coreos_userdata(i)

    config.vm.define vm_name = user_data[:name] do |config2|
      config2.vm.hostname = vm_name

      if enable_serial_logging
        logdir = File.join(File.dirname(__FILE__), 'log')
        FileUtils.mkdir_p(logdir)

        serialFile = File.join(logdir, "%s-serial.txt" % vm_name)
        FileUtils.touch(serialFile)

        config2.vm.provider :virtualbox do |vb, override|
          vb.customize ["modifyvm", :id, "--uart1", "0x3F8", "4"]
          vb.customize ["modifyvm", :id, "--uartmode1", serialFile]
        end
      end

      config2.vm.provider :virtualbox do |vb, override|
        vb.memory = user_data[:mem]
        vb.cpus = user_data[:cpus]
      end

      ip_address = base_ip_address + "#{i+100}"
      config2.vm.network :private_network, ip: ip_address

      # add non-etcd or master ip to the list
      if i.between?(3, (get_num_apiservers + 2))
        apiserver_nginx_pool += "server #{ip_address}:8080; "
        apiserver_host_data += "#{"apiserver-%03d" % (i - 2)} ansible_ssh_host=#{ip_address}\n "
      end
      node_host_data += "#{"node-%03d" % (i - (2 + get_num_apiservers))} ansible_ssh_host=#{ip_address}\n" if i > (2 + get_num_apiservers)


      if File.exist?(user_data[:data])
        config2.vm.provision :file, :source => "#{user_data[:data]}", :destination => "/tmp/vagrantfile-user-data"
        config2.vm.provision :shell, :privileged => true,
        inline: <<-EOF
          mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/
        EOF
      end

      # Only execute the ansible provisioner once, when all machines are up and ready
      if base_ip_address + "#{i+100}" == final_node_ip
        kraken_env_var_entries = %w(
          dns_domain
          dns_ip
          dockercfg_base64
          hyperkube_image
          hyperkube_deployment_mode
          interface_name
          kraken_services_branch
          kraken_services_dirs
          kraken_services_repo
          kubernetes_api_version
          kubernetes_binaries_uri
          logentries_token
          logentries_url
        ).map { |s| [s.to_sym, ENV["KRAKEN_#{s.upcase}"]] }
        kraken_env_vars = Hash[kraken_env_var_entries]

        other_vars = {
          :ansible_ssh_private_key_file => File.expand_path(ENV['KRAKEN_VAGRANT_PRIVATE_KEY']),
          :etcd_ip => base_ip_address + "#{1+100}",
          :master_ip => base_ip_address + "#{2+100}",
          :node_001_ip => base_ip_address + "#{(2 + get_num_apiservers)+100}",
          :apiserver_nginx_pool => apiserver_nginx_pool,
          :apiservers_inventory_info => apiserver_host_data,
          :nodes_inventory_info => node_host_data
        }

        render_vars = other_vars.merge(kraken_env_vars)

        render("#{ENV['VAGRANT_CWD']}/templates/ansible.inventory.erb", "#{ENV['VAGRANT_CWD']}/rendered/ansible.inventory", render_vars)

        ansible_forks = ENV['ANSIBLE_FORKS']
        config2.vm.provision 'ansible' do |ansible|
          ansible.limit = 'cluster'
          ansible.inventory_path = "#{ENV['VAGRANT_CWD']}/rendered/ansible.inventory"
          ansible.playbook = "../../ansible/vagrant_provision.yaml"
          ansible.raw_arguments = ["--forks=#{ansible_forks}"]
          ansible.verbose = "v"
        end
      end
    end
  end
end
